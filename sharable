#!/usr/bin/env node

const http  = require('http');
const fs = require('fs/promises');

const DEFAULTS = {
  PORT: 9460,
  HOST: '0.0.0.0',
  INSTALL_DIR: '/usr/local/bin',
  ROOT: '.',
};

const PROC_PARAMS = (function () {
  if (process.argv[2] === 'install') {
    return {
      ACTION: 'install',
      DIRECTORY: process.argv[3] || DEFAULTS.INSTALL_DIR,
    };
  } else {
    return {
      ACTION: 'server',
      HOST: DEFAULTS.HOST,
      PORT: DEFAULTS.PORT,
      ROOT: process.argv[2] && (process.argv[2] === '.' ? process.cwd() : process.argv[2]) || DEFAULTS.ROOT,
    };
  }
})();

const TEMPLATE = {
  ROOT: `
<!DOCTYPE html>
<html>
<head>
<title>{{title}}</title>
<meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1" />
<style>{{styles}}</style>
</head>
<body>
<div class="toolbar">
  <div class="toolbar_right">
  </div>
</div>
{{body}}
</body>
</html>
  `,
  DIR: `
<div class="directory"><a class="directory_link" href="{{link}}">[ {{name}} ]</a></div>
  `,
  FILE: `
<div class="file"><a class="file_link" href="{{link}}">{{name}}</a></div>
  `,
  LAYOUT: `
<div class="dir-content">{{content}}</div>
<div class="upload-block">
  <form method="POST" action="/act/upload" enctype='multipart/form-data'>
    <input type="hidden" value="{{current}}" name="directory" />
    <input type="file" multiple name="files[]" />
    <button type="submit">upload</button>
  </form>
</div>
  `,
  P404: `
<html>
  <div>Not found: {{path}}</div>
  <div><a href="/">Go to root</a></div>
</html>
  `,
  STYLES: `
body,html { height: 100%; margin: 0; }
body {display: flex; flex-direction: column;}
.dir-content { flex:1; overflow: auto; padding: 5px; }
.upload-block { height: 24px; padding: 5px; }
  `,
};

const TEMPLATE_KEY_RE = /\{\{(\w+)\}\}/g;

let server;

const DEFAULT_URL = {
  '/favicon.ico': {
    type: 'image/ico',
    content: Buffer.from(''),
  },
};

const ACTIONS = {
  // Doesn't work well enough, don't rely on it
  '/act/stop'(request, response) {
    response.writeHead(204);
    response.end();
    console.log('Server is being stopped');
    server.close();
  },
  async '/act/upload'(request, response) {
    const data = await getPostData(request);
    const parsed = parseFormData(request, data);
    const location = parsed.directory[0].payload.toString();

    await Promise.all(parsed['files[]'].map(function (fileData) {
      return fs.writeFile(
        `${PROC_PARAMS.ROOT}${location === '/' ? '' : location}/${fileData.filename}`,
        fileData.payload
      );
    }));

    response.writeHead(302, { location });
    response.end();
  },
}

function getPostData (request) {
  const result = {
    chunks: [],
    length: 0,
  };

  return new Promise(function (resolve, reject) {
    request.on('error', reject);
    request.on('data', function (chunk) {
      result.chunks.push(chunk);
      result.length += chunk.length;
    });
    request.on('end', function () {
      resolve(Buffer.concat(result.chunks, result.length));
    });
  });
}

const CT_RE = /^multipart\/form-data;\s*boundary=(.+)$/;
const CD_RE = /[Cc]ontent-[Dd]isposition:\s*form-data;\s*(.+)(?:\r\n|$)/;
const CD_PARAMS_RE = /(\w+)="((?:[^"\\]|\\.)*)"/g;
const HEADER_RE = /(.+?):\s*(.+?)(?:;\s*(.+))?(?:\r\n|$)/g;
const HEAER_NEW_LINE_RE = /\r\n\s+/g;

function splitBuffer (buffer, glue) {
  const result = [];
  for (let position = 0 ; position < buffer.length ;) {
    const newPosition = buffer.indexOf(glue, position);
    if (newPosition === -1) {
      result.push(buffer.slice(position));
      position = buffer.length;
    } else {
      result.push(buffer.slice(position, newPosition));
      position = newPosition + glue.length;
    }
  }

  return result;
}

function match (value, regExp, callback) {
  let regMatch = null;
  let result = undefined;

  while (regMatch = regExp.exec(value)) {
    result = callback(regMatch, result);
  }

  return result;
}

function trimBuffer (buffer) {
  const end = buffer.slice(-2);

  if (end[0] === 0x0d && end[1] === 0x0a) {
    return buffer.slice(0, -2);
  }

  return buffer;
}

function parseFormData (request, data) {
  const boundary = (request.headers['content-type'].match(CT_RE))?.[1];
  const formData = {};

  const parts = splitBuffer(data, '--' + boundary).slice(1, -1).forEach(function (data) {
    const [headersRaw, body] = splitBuffer(data, '\r\n\r\n');
    const headersData = headersRaw.toString().replace(HEAER_NEW_LINE_RE, '');
    const headers = match(headersData, HEADER_RE, function (regMatch, result = {}) {
      result[regMatch[1].toLowerCase()] = {
        name: regMatch[2],
        params: match(regMatch[3], CD_PARAMS_RE, (regMatch, result = {}) => {
          result[regMatch[1]] = regMatch[2];
          return result;
        }),
      };

      return result;
    });

    if (headers['content-disposition'].name === 'form-data') {
      const name = headers['content-disposition'].params.name;
      const data = {
        payload: trimBuffer(body),
        ...headers['content-disposition'].params,
      };

      if (name in formData) {
        formData[name].push(data);
      } else {
        formData[name] = [data];
      }
    }
  });

  return formData;
}

function template (template, substitutions) {
  return template.trim().replace(TEMPLATE_KEY_RE, (original, key) => (key in substitutions)
    ? substitutions[key]
    : original
  );
}

function getAction (request, response) {
  if (request.method === 'POST') {
    if (request.url in ACTIONS) {
      ACTIONS[request.url](request, response);
    }
  } else {
    getFiles(request, response);
  }
}

function getPath (...route) {
  return route.join('/').replace(/\/{2,}/g, '/');
}

async function checkType (path) {
  const toCheck = path instanceof Array ? path : [path];
  const promises = toCheck.map((item) => fs.stat(item));

  try {
    const stats = await Promise.allSettled(promises);

    return stats.map((item) => {
      if (item.status === 'rejected') {
        return 'failed';
      }

      return item.value.isDirectory() ? 'directory' : 'file';
    });
  } catch (error) {
    console.log(error);
    return [];
  }
}

function sorter (item1, item2) {
  if (item1.type === 'directory' && item2.type !== 'directory') {
    return -1;
  }

  return 1;
}

function readdir (dirname) {
  return fs.readdir(PROC_PARAMS.ROOT + dirname).then(records => {
    return checkType(records.map(item => (getPath(PROC_PARAMS.ROOT, dirname, item))))
      .then(types => types.map((type, index) => ({
        type: type,
        name: records[index],
        path: getPath(dirname, records[index]),
      })));
  }).then(records =>
    records.sort(sorter).map((record) => {
      return record.type === 'directory'
        ? template(TEMPLATE.DIR, { name: record.name, link: record.path })
        : template(TEMPLATE.FILE, { name: record.name, link: record.path });
    }).join('')
  );
}

function getFileName (path) {
  const slashPos = path.lastIndexOf('/');
  if (slashPos === -1) {
    return path;
  }

  return path.substring(slashPos + 1);
}

function getBackLink (current) {
  return current === '/' ? '' : template(TEMPLATE.DIR, { name: '..', link: getPath(current, '..') });
}

function parseUrl (path) {
  const result = {
    url: '',
    params: {}, // Doesn't matter yet (or forever)
  };

  const paramsPos = path.indexOf('?');

  if (paramsPos > -1) {
    result.url = decodeURIComponent(path.substring(0, paramsPos));
  } else {
    result.url = decodeURIComponent(path);
  }

  return result;
}

async function getFiles (request, response) {
  const { url } = parseUrl(request.url);
  const defaults = DEFAULT_URL[url];

  if (defaults) {
    response.writeHead(200, { 'content-type': defaults.type });
    response.end(defaults.content);
  } else {
    const file = PROC_PARAMS.ROOT + url;
    const types = await checkType(file);

    if (types[0] === 'directory') {
      readdir(url).then(content => {
        const data = template(TEMPLATE.ROOT, {
          body: template(TEMPLATE.LAYOUT, {
            content: getBackLink(url) + content,
            current: url,
          }),
          title: PROC_PARAMS.ROOT,
          styles: TEMPLATE.STYLES,
        });

        response.writeHead(200, {
          'content-type': 'text/html',
        });
        response.end(data);
      }).catch((error) => {
        console.error(error);
        response.writeHead(404, { 'content-type': 'text/html' });
        response.end(template(TEMPLATE.P404, { path: url }));
      });
    } else {
      const filename = getFileName(file);

      fs.readFile(file).then(data => {
        response.writeHead(200, {
          'content-type': 'application/octet-stream',
          'content-disposition': `attachment; filename="${filename}"`
        });
        response.end(data);
      }).catch((error) => {
        console.error(error);
        response.writeHead(404, { 'content-type': 'text/html' });
        response.end(template(TEMPLATE.P404, { path: url }));
      });
    }
  }
}

function processor (request, response) {
  getAction(request, response);
}

switch (PROC_PARAMS.ACTION) {
  case 'install':
    const scriptName = getFileName(__filename);
    fs.readFile(__filename).then((data) => fs.writeFile(PROC_PARAMS.DIRECTORY + '/' + scriptName, data));
    break;
  case 'server':
    server = http.createServer(processor).listen(PROC_PARAMS.PORT, function () {
      console.log(`Server is listening on ${PROC_PARAMS.HOST}:${PROC_PARAMS.PORT}`);
    });
    break;
  default:
    throw new Error('Unexpected action');
}
